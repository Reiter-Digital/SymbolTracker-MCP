// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MCP Tool Tests should match snapshot for test-autocomplete 1`] = `
"{"completions":[{"symbol":"add","type":"function","signature":"(a, b): number","description":"A sample JavaScript file to test the MCP DevDocs Server","filePath":"<PROJECT_ROOT>/src/test-js-sample.js"},{"symbol":"home_page","type":"function","signature":"(): any","description":"Serves the home page.","filePath":"<PROJECT_ROOT>/test_sample.py"},{"symbol":"AuthManager","type":"class","description":"A class that manages user authentication","filePath":"<PROJECT_ROOT>/src/test-js-sample.js"},{"symbol":"MyRenamedClass","type":"class","description":"A sample class for testing./n/nAttributes:/n    name (str): The name of the instance.","filePath":"<PROJECT_ROOT>/test_sample.py"},{"symbol":"MockApp","type":"class","description":"This is a sample Python module for testing the parser./n/nIt includes various Python constructs.","filePath":"<PROJECT_ROOT>/test_sample.py"},{"symbol":"decorator","type":"method","signature":"(func): any","description":"","filePath":"<PROJECT_ROOT>/test_sample.py"},{"symbol":"GET /api/users","type":"route","description":"GET /api/users","filePath":"<PROJECT_ROOT>/src/test-js-sample.js"},{"symbol":"POST /api/users","type":"route","description":"POST /api/users","filePath":"<PROJECT_ROOT>/src/test-js-sample.js"},{"symbol":"GET /api/items/{item_id}","type":"route","description":"Gets an item by its ID./n/nArgs:/n    item_id: The ID of the item to retrieve./n/nReturns:/n    A dictionary representing the item.","filePath":"<PROJECT_ROOT>/test_sample.py"}]}
"
`;

exports[`MCP Tool Tests should match snapshot for test-find-usages 1`] = `"{"symbol":"add","type":"function","usages":[{"file":"<PROJECT_ROOT>/src/test-js-sample.js","line":12,"column":10,"snippet":" *///nfunction add(a, b) {//n  return a + b;","isDefinition":true},{"file":"<PROJECT_ROOT>/test-debug-registry.ts","line":8,"column":12,"snippet":"  functions: [{//n    name: /"add/",//n    params: [/"a/", /"b/"],","isDefinition":false},{"file":"<PROJECT_ROOT>/test-debug-registry.ts","line":40,"column":11,"snippet":"const searchResult = symbolRegistry.search({//n  query: /"add/",//n  type: undefined,","isDefinition":false},{"file":"<PROJECT_ROOT>/src/test-sample.ts","line":11,"column":17,"snippet":" *///nexport function add(a: number, b: number): number {//n  return a + b;","isDefinition":false},{"file":"<PROJECT_ROOT>/src/parsers/python.ts","line":215,"column":21,"snippet":"          } else {//n            // Only add if paramNameText is not null/empty//n            if (paramNameText) {","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/undici-types/formdata.d.ts","line":31,"column":9,"snippet":"   * Set a new value for an existing key inside FormData,//n   * or add the new field if it does not already exist.//n   *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/undici-types/cache.d.ts","line":19,"column":3,"snippet":"  matchAll (request?: RequestInfo, options?: CacheQueryOptions): Promise<readonly Response[]>,//n  add (request: RequestInfo): Promise<undefined>,//n  addAll (requests: RequestInfo[]): Promise<undefined>,","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/typescript.d.ts","line":8261,"column":89,"snippet":"        /**//n         * If enabled, TypeScript will search through all external modules' exports and add them to the completions list.//n         * This affects lone identifier completions but not completions on the right hand side of \`obj.\`.","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":1458,"column":84,"snippet":"interface CSSNumericValue extends CSSStyleValue {//n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add) *///n    add(...values: CSSNumberish[]): CSSNumericValue;","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":1459,"column":5,"snippet":"    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add) *///n    add(...values: CSSNumberish[]): CSSNumericValue;//n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div) */","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":1666,"column":74,"snippet":"interface Cache {//n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/add) *///n    add(request: RequestInfo | URL): Promise<void>;","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":1667,"column":5,"snippet":"    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/add) *///n    add(request: RequestInfo | URL): Promise<void>;//n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll) */","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3358,"column":306,"snippet":"/**//n * This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.//n *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3743,"column":231,"snippet":"/**//n * This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)//n *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3783,"column":80,"snippet":"     *//n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a /"ConstraintError/" DOMException.//n     *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3787,"column":82,"snippet":"     *//n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)//n     */","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3789,"column":5,"snippet":"     *///n    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;//n    /**","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":3885,"column":80,"snippet":"     *//n     * If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a /"ConstraintError/" DOMException.//n     *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":4838,"column":169,"snippet":"/**//n * PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of /"mark/". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.//n *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.webworker.d.ts","line":4853,"column":178,"snippet":"/**//n * PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of /"measure/". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.//n *","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.scripthost.d.ts","line":86,"column":73,"snippet":"     * Returns an entire line from an input stream.//n     * Although this method extracts the newline character, it does not add it to the returned string.//n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.esnext.disposable.d.ts","line":66,"column":37,"snippet":"     * Adds a disposable resource to the stack, returning the resource.//n     * @param value The resource to add. \`null\` and \`undefined\` will not be added, but will be returned.//n     * @returns The provided {@link value}.","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.esnext.disposable.d.ts","line":72,"column":34,"snippet":"     * Adds a value and associated disposal callback as a resource to the stack.//n     * @param value The value to add.//n     * @param onDispose The callback to use in place of a \`[Symbol.dispose]()\` method. Will be invoked with \`value\`","isDefinition":false},{"file":"<PROJECT_ROOT>/node_modules/typescript/lib/lib.esnext.disposable.d.ts","line":133,"column":37,"snippet":"     * Adds a disposable resource to the stack, returning the resource.//n     * @param value The resource to add. \`null\` and \`undefined\` will not be added, but will be returned.//n     *"`;

exports[`MCP Tool Tests should match snapshot for test-get-doc-sum 1`] = `
"{"found":false,"error":"Symbol 'sum' not found"}
"
`;

exports[`MCP Tool Tests should match snapshot for test-get-doc-symbol 1`] = `
"{"found":true,"symbol":{"name":"add","type":"function","file":"<PROJECT_ROOT>/src/test-js-sample.js","description":"A sample JavaScript file to test the MCP DevDocs Server","signature":"(a, b): number","exported":true}}
"
`;

exports[`MCP Tool Tests should match snapshot for test-refresh-registry 1`] = `""`;

exports[`MCP Tool Tests should match snapshot for test-search-symbols 1`] = `
"{"results":[{"symbol":"add","type":"function","file":"<PROJECT_ROOT>/src/test-js-sample.js","description":"A sample JavaScript file to test the MCP DevDocs Server","signature":"(a, b): number","exported":true}]}
"
`;
